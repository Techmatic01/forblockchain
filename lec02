// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
contract lect2 {

receive() external payable { }
address payable owner = payable (msg.sender);
uint public contractBalance = address(this).balance;

function sendEther() public payable {

require(msg.value>=1 ether, "not enough eths");

payable (owner).transfer(address(this).balance);

}




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";

contract Salar is ERC20, ERC20Permit {
    constructor() ERC20("Salar", "SLR") ERC20Permit("Salar") {}
}


}



